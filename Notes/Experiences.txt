一、手机端+Website开发
1、Issue Descirption--position:fixed 如果头部导航是fixed，在ios5以下设备进行文本框输入focus时出现定位失败的问题，它会掉下来。
   
   Fixed Solutions
   1)第一种，在meta标签加上tagert-denstydpi=device-dpi。
       这个属性只对android系统起作用，专有属性。IOS不支持它，存在兼容性问题

   2)第二种，导航切换时将其定位修改为position:absolute;让其随页面滚动，然后切换回去后还原设置。

2、Issue Descirption--标签，p，td，h1-h6,span等包含内容时在手机屏（min-width:320px）会溢出。

   Fixed Solutions
   1)根据需求来，如果需要实现一行然后多余内容变... 则需要为其父元素和本身设置css.
    .xx{ overflow:hidden;text-overflow:eillipsis;white-space:nowrap;}

   2)若需要在单词内折行设置css   ----不允许英文单词内折行则设置
    .xx{word-break：break-all;}    ..xx{word-break:break-word;word-nowrap:break-word;}
    
   3)前台当数据过来时用js截取自定义字符串长度+"..."，也可以在后台截取。

3、Issue Description--footer on the bottom forever.

   Fixed Solutions:
   使用固定的html结构和css写法实现footer永远沉底 ===》Following example.
   Html Markup：
   <div id="container">
        <div class="nav"></div>
        <div id="page">
            <div class="content"><p>test</p><p>test</p><p>test</p>
              <p>test</p><p>test</p><p>test</p><p>test</p><p>test</p><p>test</p>
              <p>test</p><p>test</p><p>test</p><p>test</p><p>test</p><p>test</p>
            </div>
        </div>
    </div>
    <footer>
        <div class="copyright">There is nothing can tell you.</div>
    </footer>

   CSS Markup：
   html, body {
     height: 100%;margin:0;padding:0;
     background-color:#000;
   }
   #container{
     min-height: 100%;height: auto !important;
	 height:100%;
     background-color:blue;
   }
    
   #container #page { 
     padding-bottom: 75px;//equal footer height
   }
   footer {
  	 height: 75px;//footer height
     margin-top:-75px;//equal footer height
     clear:both;
     background-color:yellow;
   }
   .nav { width:100%;height:95px;background-color:green; }
   
   Ps:使用时如果html结构满足不了你的需求，你需要在#container和footer之前加入新元素，请将新元素的高度也算进去，
      使其padding-bottom的值永远和margin-top的值相抵消掉。

4、html+css3页面构造时需要遵循W3C的标签嵌套使用的规则。代码尽量简洁，不要使用过多的类。注意必要注释的添加

5、慎用绝对定位和相对定位，只有设定position属性后，z-index才起作用。relative absolute fixed static(default value)

6、对于不支持Html5或CSS3某些新属性的浏览器

	Fixed Solutions:
	1)使用html页面条件注释 加载html5shiv.js以及加载不同IE版本的CSS
	<!--[if lt IE 9]> <script src="html5shiv.js"></script> <![endif]-->
	<!--[if IE8]><link rel="stylesheet" href="ie8.css" type="text/css"/><![end if]-->

	2)使用modernizr.js检测当前浏览器支持的CSS3属性

	3)针对不同的浏览器采用兼容性写法（浏览器厂商+属性）===》Following Example
	CSS Markup:
	-webkit-transition:all 0.4 linear 0.1;
	-moz-transition:all 0.4 linear 0.1;
	-o-transition:all 0.4 linear 0.1;
	transition：all 0.4 linear 0.1;

	4)使用css hack写法。<慎用存在出现一些潜在的危险。>
	_property==》选择IE6及以下  
	+、#、 *property==》选择IE7及以下  
	\9 选择IE6+  
	\0 选择IE8+和Opera15以下的浏览器

7、absolute，relative，fixed属性与index，并解决相互嵌套时执行动画时遇到的bug

8、三种方法清除float.
	1)#test{clear:both;}  #test为浮动元素的下一个兄弟元素
	2)#test{display:block;zoom:1;overflow:hidden;}  #test为浮动元素的父元素。zoom:1也可以替换为固定的width或height
	3)#test{zoom:1;}#test:after{display:block;clear:both;visibility:hidden;height:0;content:'';}  #test为浮动元素的父元素

9、如何让已知高度的容器在页面中水平垂直居中？
	Solution：#test{position:absolute;top:50%;left:50%;width:200px;height:200px;margin:-100px 0 0 -100px;}

10、了解CSS设计模式OOCSS和SMACSS
   1)OOCSS--面向对象的CSS
   一般的导航栏写法，结构应该会像上面的 HTML 范例一样，如果要对那些 <a> 标签定义样式，CSS 的写法可能写成 .nav--main ul li a {}，
   这种写法先不管效能上的问题，可以看出来过度地依赖元素标签的结构，有可能之后 HTML 结构改变，这个 CSS 就必须跟著重构，
   造成维护上多余的成本。
    总结：减少对 HTML 结构的依赖，增加CSS class重复性的使用
   2)SMACSS
    BASE--Base 就是设定标签元素的预设值，例如浏览器的 reset 可以写在这里
    LAYOUT--Layout 是指整个网站的「大架构」的外观，而非 .button 这种小元件的 class。网站通常会有一些主要的大区块，可能是 header 或 footer，Layout 就是用来定义这些「大架构」的 CSS
    MODULE--这里的 Module 顾名思义，就是可以在其他地方被重复使用
    PARTIAL--Partial 跟 Latout 不同，也跟 Module 不同，他比 Layout 的范围小，可能是header 底下的某个子元素。他不像 Module，他是特定单一领域下特别的设定。
    STATE--State 负责定义元素不同的状态下，所呈现的样式。但是并非指一个元素的 :hover 或 :active 下的状态。举例来说，一个导航栏分页，目前所在页面的分页需要加上 .active
    THEME--Theme 就像 Layout 一样负责「大架构」上的样式。简称皮肤

11、编写可维护的CSS
    1)代码顺序
       1、Reset 万物之根源
       2、元素类型 没有 class 的 h1、ul 等
       3、对象以及抽象内容 最一般、最基础的设计模式
       4、子元素 由对象延伸出来的所有拓展及其子元素
       5、修补 针对异常状态
    2)CSS 规则集分析
       1、class 名称以连字符（-）连接，除了下文提到的 BEM 命名法；
       2、缩进 4 空格；
       3、声明拆分成多行；
       4、声明以相关性顺序排列，而非字母顺序；
       5、有前缀的声明适当缩进，从而对齐其值；
       6、缩进样式从而反映 DOM；
       7、保留最后一条声明结尾的分号。
    3)命名规范
       1、BEM命名法--Block Element Modifier
	    .block{}
		.block__element{}
		.block--modifier{}
		其中：
		.block 代表某个基本的抽象元素；
		.block__element 代表 .block 这一整体的一个子元素；
		.block--modifier 代表 .block 的某个不同状态。
       2、为了确保易读性，在 HTML 标记中用两个空格隔开 class 名，例如：<div class="foo--bar  bar__baz">
	   3、千万不要把 CSS 样式用作 JavaScript 钩子。把 JS 行为与样式混在一起将无法对其分别处理。如果你要把 JS 和某些标记绑定起来的话，
	   写一个 JS 专用的 class。简单地说就是划定一个前缀 .js- 的命名空间，例如 .js-toggle，.js-drag-and-drop。这意味着我们可以通过 
	   class 同时绑定 JS 和 CSS 而不会因为冲突而引发麻烦。
	   4、I18n--在 CSS 中用美式拼法更佳 例如 $brand-color，$highlight-color
	 4)注释
	 我使用行宽不超过 80 字节的块状注释：
	/**
	 * 这是一个文档块（DocBlock）风格的注释。
	 *
	 * 这里开始是描述更详细、篇幅更长的注释正文。当然，我们要把行宽控制在 80 字以内。
	 *
	 * 我们可以在注释中嵌入 HTML 标记，而且这也是个不错的办法：
	 *
		<div class=foo>
			<p>Lorem</p>
		</div>
	 *
	 * 如果是注释内嵌的标记的话，在它前面不加星号，否则会被复制进去。
	 */
     在注释中应当尽量详细描述代码，因为对你来说清晰易懂的内容对其他人可能并非如此。每写一部分代码就要专门写注释以详解。
	 注释有许多很先进的用法，例如：
		1、准修饰选择器--/*html*/.product-page{} /*ol*/.breadcrumb{} /*p*/.intro{} /*ul*/.image-thumbs{}
		2、代码标签--
		/**
		 * ^navigation ^lists
		 */
		.nav{}

		/**
		 * ^grids ^lists ^tables
		 */
		.matrix{}
		3、继承标记--
		在元素的基本样式中：
		/**
		 * Extend `.foo` in theme.css
		 */
		 .foo{}
		在元素的拓展样式中：
		/**
		 * Extends `.foo` in base.css
		 */
		 .bar{}
	5)OOCSS--面向对象的CSS
	当你要编写一个新组件时，将其拆分成结构(对象)和外观(拓展)。编写结构部分时用最通用 class 以保证复用性，编写外观时用更具体的 class 来添加设计方法。
		.room{}
		.room--kitchen{}
		.room--bedroom{}
		.room--bathroom{}
		
二、Javascipt经验积累

1、js判断是PC还是移动设备
	function IsPC() {
		var userAgentInfo = navigator.userAgent;
		var Agents = ["Android", "iPhone",
					"SymbianOS", "Windows Phone",
					"iPad", "iPod"];
		var flag = true;
		for (var v = 0; v < Agents.length; v++) {
			if (userAgentInfo.indexOf(Agents[v]) > 0) {
				flag = false;
				break;
			}
		}
		return flag;
	}

2、autocomplete在chorme中不起作用（fixed solutions）  关闭第二次输入自动填充文本框的值
	(function(){
	　　if(navigator.userAgent.toLowerCase().indexOf("chrome") != -1){
	　　　　var selectors = document.getElementsByTagName("input");
	　　　　for(var i=0;i<selectors.length;i++){
	　　　　　　if((selectors[i].type !== "submit") && (selectors[i].type !== "password")){
	　　　　　　　　var input = selectors[i];
	　　　　　　　　var inputName = selectors[i].name;
	　　　　　　　　var inputid = selectors[i].id;
	　　　　　　　　selectors[i].removeAttribute("name");
	　　　　　　　　selectors[i].removeAttribute("id");
	　　　　　　　　setTimeout(function(){
	　　　　　　　　　　input.setAttribute("name",inputName);
	　　　　　　　　　　input.setAttribute("id",inputid);
	　　　　　　　　},1)
	　　　　　　}

	　　　　}

	　　}
	})()

3、让ie9下支持placeholder属性 （Best Practise Solution: jquery.placeholder.js)
	$(function(){  
	 
	  //判断浏览器是否支持placeholder属性
	  supportPlaceholder='placeholder'in document.createElement('input'),
	 
	  placeholder=function(input){
	 
		var text = input.attr('placeholder'),
		defaultValue = input.defaultValue;
	 
		if(!defaultValue){
	 
		  input.val(text).addClass("phcolor");
		}
	 
		input.focus(function(){
	 
		  if(input.val() == text){
	   
			$(this).val("");
		  }
		});
	 
	  
		input.blur(function(){
	 
		  if(input.val() == ""){
		   
			$(this).val(text).addClass("phcolor");
		  }
		});
	 
		//输入的字符不为灰色
		input.keydown(function(){
	  
		  $(this).removeClass("phcolor");
		});
	  };
	 
	  //当浏览器不支持placeholder属性时，调用placeholder函数
	  if(!supportPlaceholder){
	 
		$('input').each(function(){
	 
		  text = $(this).attr("placeholder");
	 
		  if($(this).attr("type") == "text"){
	 
			placeholder($(this));
		  }
		});
	  }
	 
	});

4、js不支持函数重载，所有如果有特定需要，可采取模拟参数个数方式解决
	function test(){

	   if(arguments.length=0){
		  alert('!');
	   }else if(arguments.length=1){
		  alert(arguments[0]);       
	   }
	   else if(arguments.length=2){
		  alert(arguments[0]);
		  alert(arguments[1]);
	   }

	}
	test();
	test(10);
	test(10,20);

5、contentType，text/html与text/plain的区别
	1)text/html的意思是将文件的content-type设置为text/html的形式，
	PS：浏览器在获取到这种文件时会自动调用html的解析器对文件进行相应的处理。

	2)text/plain的意思是将文件设置为纯文本的形式，
	Ps: 浏览器在获取到这种文件时并不会对其进行处理。

6、使用String.Split(new char[]('x'),StringSplitOptions.RemoveEmptyEntry)

7、使用js代码高效去重某arrylist或数组。
	Array.prototype.unique3 = function(){
	 var res = [];
	 var json = {};
	 for(var i = 0; i < this.length; i++){
	  if(!json[this[i]]){
	   res.push(this[i]);
	   json[this[i]] = 1;
	  }
	 }
	 return res;
	}
	var arr = [112,112,34,'你好',112,112,34,'你好','str','str1'];
	alert(arr.unique3());

8、给下拉框添加placeholder技巧
	<select>  
		<option value='' disabled selected style='display:none;'>Please Choose</option>  
		<option value='0'>Open when powered (most valves do this)</option>  
		<option value='1'>Closed when powered, auto-opens when power is cut</option>  
	</select>  
	PS:第一项选择完之后就会消失,不影响其他选择项

9、关于Ajax传输数据时，字符串编码格式的问题
	如果是get请求，在拼url和传递参数时，需要注意，不要直接将控件的值当成字符串传递
	url: 'renameTag?Id=' + id + '&tagName=' + $('input[name="tagName"]').val()

	出现错误：经测试IE下 传递给后台的tagName的值，中文被编译成乱码
	解决办法：使用data参数传递 data: { Id: id, tagName: $('input[name="tagName"]').val() }

10、JSHint Error : This character may get silently deleted by one or more browsers
    文件格式不正确，是UTF-8 BOM格式，用NotePad++转换一下格式 UTF-8 无BOM格式即可解决

11、Match Files  [Gulp learn note]
	1)* 匹配文件路径中的0个或多个字符，但不会匹配路径分隔符，除非路径分隔符出现在末尾。
	2)** 匹配路径中的0个或多个目录及其子目录，需要单独出现，即它左右不能有其他东西了。如果出现在末尾，也能匹配文件。
	3)? 匹配文件路径中的一个字符(不会匹配路径分隔符)。
	4)[...] 匹配方括号中出现的字符中的任意一个，当方括号中第一个字符为^或!时，则表示不匹配方括号中出现的其他字符中的任意一个。
	5)!(pattern|pattern|pattern) 匹配任何与括号中给定的任一参数一致的都不匹配的。
	6)(pattern|pattern|pattern) 匹配括号中给定的任一参数0次或1次。
	7)+(pattern|pattern|pattern) 匹配括号中给定的任一参数至少1次。
	8)*(a|b|c) 匹配括号中给定的任一参数0次或多次。
	9)@(pattern|pat*|pat?erN) 匹配括号中给定的任一参数1次。

用实例来加深理解：
	1)* 能匹配 a.js , x.y , abc , abc/，但不能匹配 a/b.js
	2)*.* 能匹配 a.js , style.css , a.b , x.y
	3)*/*/*.js 能匹配 a/b/c.js , x/y/z.js，不能匹配 a/b.js , a/b/c/d.js
	4)** 能匹配 abc , a/b.js , a/b/c.js , x/y/z , x/y/z/a.b，能用来匹配所有的目录和文件
	5)**/*.js 能匹配 foo.js , a/foo.js , a/b/foo.js , a/b/c/foo.js
	6)a/**/z 能匹配 a/z , a/b/z , a/b/c/z , a/d/g/h/j/k/z
	7)a/**b/z 能匹配 a/b/z , a/sb/z，但不能匹配 a/x/sb/z，因为只有单**单独出现才能匹配多级目录
	8)?.js 能匹配 a.js , b.js , c.js
	9)a?? 能匹配 a.b , abc，但不能匹配 ab/，因为它不会匹配路径分隔符
	10)[xyz].js 只能匹配 x.js , y.js , z.js，不会匹配 xy.js , xyz.js 等，整个中括号只代表一个字符
	11)[^xyz].js 能匹配 a.js , b.js , c.js等，不能匹配 x.js , y.js , z.js

12、Android 6+手机 文件上传不支持多图。不支持mulipute属性。  
	Android 6+手机不支持文件上传的mulipute属性，即不支持多图上传，我们使用的webuploader之前默认是多选的，所以怎么点都不用，但设置为单选后，就能正常使用了。
	在解决此问题的过程中发现Android 6+ 对accept='image/*'属性支持也因机型的不同而不同。比如小米四的手机就不能识别。但HTC，IOS都能识别。

13、Javascript Math 取整类型
	1)字符串转化为整形:parseInt(str);如parseInt("7.6")**返回7
	2)向上取整,有小数就整数部分加1:Math.ceil(number) ;如Math.ceil(7.6) **返回8
	3)向下取整,舍去小数部分 : Math.floor(number) ;如Math.floor(7.6) **返回7
	4)四舍五入 :Math.round(number) ;如Math.round(3.4) **返回3, 但是Math.round(3.5)**返回4

14、设置自增键从0开始
        1）dbcc checkident('test',reseed,0)   test为表名
        2）truncate table test(表名)

三、开发和调试技巧+快键键

1、Elements页卡中几个有用的快捷键  [chrome dev tools]
	1)方向键快速选择，上下键快速导航，左右键收起展开；
	2)enter快速编辑属性；
	3)tab属性切换；
	4)H键快速隐藏dom，知道这个快捷键之前，我要么删除dom看效果，要么手工输入display:none，有H就方便多了。
  
2、npm常用命令：
	安装插件：npm [-g] [--save-dev]
	更新插件：npm update [-g] [--save-dev]
	卸载插件：npm uninstall [-g] [--save-dev]
	指定版本：npm install @VERSION [--save-dev] （其中VERSION就是你所需要的版本号）

3、完整的开发流程应该包括：
	1)本地开发环境的初始化 node.js+npm   创建packge.json文件 配置dev依赖
	2)第三方依赖的管理
	3)源文件编译
	4)自动化测试
	5)发布到pipeline和各个环境

四、Web安全相关
1、CSRF Cross Site Request Forgery --跨站域请求伪造
   原理：用户C登录了信任的网站webA 生成了用户C登录信息的cookie，用户C意外登录了恶意攻击者webB，webB带着C在webA下生的cookie信息模拟真实用户C操作
   场景：
   防范：
		－ referrer校验 非常简单，基本就验证一下请求referrer，合法的才给予操作。在项目中这个王牌还是很少被用的，原因是因为referrer的不稳定，服务端不能保证每次都可以取到referrer（比如https跳http，还有很多办法可以模拟空referrer)。
		－ 验证码 这个就牛逼了，防御的滴水不漏。可惜万事有利必有其弊，你总不能发每个请求都让用户敲一次验证码吧，所以这种一般只在某些特定场景用。
		－ token  这个应该是现在比较通用的方案。当然token具体的生成方案就一堆了


